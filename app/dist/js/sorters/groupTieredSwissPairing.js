// ported from https://github.com/haugstrup/TournamentUtils/blob/master/src/GroupTieredSwissPairing.php

(function () {
    'use strict';

    var title = "Group Tiered Swiss Pairing";
    var description = "Pinburgh style grouped round pairing";

    // setup our default options
    var defaults = {
        rounds: 5,
        currentRound: 1
    };

    var maxPlayers = 128;
    var minPlayers = 16;

    function sort(players, options) {
        var playerLength = players.length;
        var groupMaps = createGroupMaps();
        var groups = [];
        var roundMap, tierPlayers, numberOfGroups, opts;

        if (options == undefined){
            options = {};
        }
        opts = Object.assign({}, defaults, options);

        // code expects currentRound to be 0 based
        // but we want to pass it in as 1 based
        opts.currentRound--;

        players = players.slice(0);

        if (playerLength < minPlayers) {
            throw new Error('You must have at least ' + minPlayers + ' players');
        }

        if (playerLength > maxPlayers) {
            throw new Error('You can have a maximum of ' + maxPlayers + ' players');
        }

        roundMap = getRoundMap(groupMaps, opts.rounds, opts.currentRound, playerLength);

        roundMap.forEach(function(size, index) {
            var numberOfPlayers = size;

            // If we're in the third to last group and...
            // ...there are 9 players left
            // ...all tiers are 4
            // Then make all three player groups
            if (
                roundMap.length-3 == index
                && players.length == 9
                && roundMap[index] === 4
            ) {
                numberOfPlayers--;
            }

            // If we're in the second to last group and...
            // ...we need to create 2 three-player groups
            // ...or we need to create 3 three-player groups
            // Then decrease the amount of players we grab for second-to-last group
            if (roundMap.length-2 == index) {
                // Remaining players == required left players-2
                if (players.length === (roundMap[index]+roundMap[index+1]-2)) {
                    if (roundMap[index+1] === 4) {
                        numberOfPlayers--;
                    }
                }

                // Remaining players == required players-3
                if (players.length === (roundMap[index]+roundMap[index+1]-3)) {

                    if (roundMap[index+1] === 8) {
                        numberOfPlayers--;
                    }

                    // Next round calls for 4 players
                    if (roundMap[index+1] === 4) {
                        numberOfPlayers--;
                        numberOfPlayers--;
                    }
                }
            }

            tierPlayers = players.splice(0, numberOfPlayers);

            // Get people into groups.
            // Nb. if there's only 6 players left, create two 3 player groups
            numberOfGroups = size/4;

            for(var j=0; j < numberOfGroups; j++) {
                var threePlayerGroup = tierPlayers.length == 9 ||
                    tierPlayers.length == 6 ||
                    tierPlayers.length == 3;
                var middleOffset = Math.ceil(tierPlayers.length/2)-2;

                // Grab the first, middle and last players
                var first = tierPlayers.splice(0, 1);
                var middle = tierPlayers.splice(middleOffset, threePlayerGroup ? 1 : 2);
                var last = tierPlayers.splice(-1, 1);

                var group = first.concat(middle, last);

                groups.push(group);
            }
        });

        return groups;
    }

    function createGroupMaps() {
        var groupMaps = {
            5: {
                16: [16, 16, 8, 8, 4],
                20: [20, [12, 8], [12, 8], [8, 8, 4], 4],
                24: [24, 12, 12, 8, 4],
                28: [28, [16, 12], [16, 12], [8, 8, 8, 4], 4],
                32: [32, 16, 16, 8, 4],
                36: [36, [20, 16], 12, [8, 8, 8, 8, 4], 4],
                40: [40, 20, [16, 16, 8], 8, 4],
                44: [44, [24, 20], [16, 16, 12], [8, 8, 8, 8, 8, 4], 4],
                48: [48, 24, 16, 8, 4],
                52: [52, [28, 24], [20, 20, 12], [8, 8, 8, 8, 8, 8, 4], 4],
                56: [56, 28, [16, 16, 16, 8], 8, 4],
                60: [60, 20, 12, [8, 8, 8, 8, 8, 8, 8, 4], 4],
                64: [64, 32, 16, 8, 4],
                68: [68, [36, 32], [20, 16, 16, 16], [12, 12, 12, 12, 12, 8], 4],
                72: [72, 36, 24, 12, 4],
                76: [76, [40, 36], [20, 20, 20, 16], [16, 16, 16, 16, 12], 4],
                80: [80, 40, 20, 16, 4],
                84: [84, [44, 40], [24, 20, 20, 20], [16, 16, 16, 16, 12, 8], 4],
                88: [88, 44, [24, 24, 20, 20], [16, 16, 16, 16, 16, 8], 4],
                92: [92, [48, 44], [24, 24, 24, 20], [16, 16, 16, 16, 16, 12], 4],
                96: [96, 48, 24, 16, 4],
                100: [100, [52, 48], [28, 24, 24, 24], [16, 16, 16, 16, 16, 12, 8], 4],
                104: [104, 52, [28, 28, 24, 24], [16, 16, 16, 16, 16, 16, 8], 4],
                108: [108, [56, 52], [28, 28, 28, 24], [16, 16, 16, 16, 16, 16, 12], 4],
                112: [112, 56, 28, 16, 4],
                116: [116, [60, 56], [32, 28, 28, 28], [16, 16, 16, 16, 16, 16, 12, 8], 4],
                120: [120, 60, [32, 32, 28, 28], [16, 16, 16, 16, 16, 16, 16, 8], 4],
                124: [124, [64, 60], [32, 32, 32, 28], [16, 16, 16, 16, 16, 16, 16, 12], 4],
                128: [128, 64, 32, 16, 4]
            },
            10: {
                16: [16, 16, 16, 16, 8, 8, 8, 8, 8, 4],
                20: [20, [12, 8], [12, 8], [12, 8], [12, 8], [8, 8, 4], [8, 8, 4], [8, 8, 4], [8, 8, 4], 4],
                24: [24, 12, 12, 12, 12, 8, 8, 8, 8, 4],
                28: [28, [16, 12], [16, 12], [16, 12], [16, 12], [8, 8, 8, 4], [8, 8, 8, 4], [8, 8, 8, 4], [8, 8, 8, 4], 4],
                32: [32, 16, 16, 16, 16, 8, 8, 8, 8, 4],
                36: [36, [20, 16], [20, 16], 12, 12, 12, [8, 8, 8, 8, 4], [8, 8, 8, 8, 4], [8, 8, 8, 8, 4], 4],
                40: [40, 20, 20, [16, 16, 8], [16, 16, 8], [16, 16, 8], 8, 8, 8, 4],
                44: [44, [24, 20], [24, 20], [16, 16, 12], [16, 16, 12], [16, 16, 12], [8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 4], 4],
                48: [48, 24, 24, 16, 16, 16, 8, 8, 8, 4],
                52: [52, [28, 24], [28, 24], [20, 20, 12], [20, 20, 12], [20, 20, 12], [8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 4], 4],
                56: [56, 28, 28, [16, 16, 16, 8], [16, 16, 16, 8], [16, 16, 16, 8], 8, 8, 8, 4],
                60: [60, 20, 20, 12, 12, 12, [8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 4], 4],
                64: [64, 32, 32, 16, 16, 16, 8, 8, 8, 4],
                68: [68, [36, 32], [36, 32], [20, 16, 16, 16], [20, 16, 16, 16], [20, 16, 16, 16], [12, 12, 12, 12, 12, 8], [12, 12, 12, 12, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                72: [72, 36, 36, 24, 24, 24, 12, 12, [8, 8, 8, 8, 8, 8, 8, 8, 4, 4], 4],
                76: [76, [40, 36], [40, 36], [20, 20, 20, 16], [20, 20, 20, 16], [20, 20, 20, 16], [16, 16, 16, 16, 12], [16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                80: [80, 40, 40, 20, 20, 20, 16, 16, 8, 4],
                84: [84, [44, 40], [44, 40], [24, 20, 20, 20], [24, 20, 20, 20], [24, 20, 20, 20], [16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                88: [88, 44, 44, [24, 24, 20, 20], [24, 24, 20, 20], [24, 24, 20, 20], [16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 8], 8, 4],
                92: [92, [48, 44], [48, 44], [24, 24, 24, 20], [24, 24, 24, 20], [24, 24, 24, 20], [16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                96: [96, 48, 48, 24, 24, 24, 16, 16, 8, 4],
                100: [100, [52, 48], [52, 48], [28, 24, 24, 24], [28, 24, 24, 24], [28, 24, 24, 24], [16, 16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 16, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                104: [104, 52, 52, [28, 28, 24, 24], [28, 28, 24, 24], [28, 28, 24, 24], [16, 16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 16, 8], 8, 4],
                108: [108, [56, 52], [56, 52], [28, 28, 28, 24], [28, 28, 28, 24], [28, 28, 28, 24], [16, 16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                112: [112, 56, 56, 28, 28, 28, 16, 16, 8, 4],
                116: [116, [60, 56], [60, 56], [32, 28, 28, 28], [32, 28, 28, 28], [32, 28, 28, 28], [16, 16, 16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 16, 16, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                120: [120, 60, 60, [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [16, 16, 16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 16, 16, 8], 8, 4],
                124: [124, [64, 60], [64, 60], [32, 32, 32, 28], [32, 32, 32, 28], [32, 32, 32, 28], [16, 16, 16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                128: [128, 64, 64, 32, 32, 32, 16, 16, 8, 4]
            },
            12: {
                16: [16, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8, 4],
                20: [20, [12, 8], [12, 8], [12, 8], [12, 8], [12, 8], [12, 8], [8, 8, 4], [8, 8, 4], [8, 8, 4], [8, 8, 4], 4],
                24: [24, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 4],
                28: [28, [16, 12], [16, 12], [16, 12], [16, 12], [16, 12], [16, 12], [8, 8, 8, 4], [8, 8, 8, 4], [8, 8, 8, 4], [8, 8, 8, 4], 4],
                32: [32, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8, 4],
                36: [36, [20, 16], [20, 16], [20, 16], 12, 12, 12, 12, [8, 8, 8, 8, 4], [8, 8, 8, 8, 4], [8, 8, 8, 8, 4], 4],
                40: [40, 20, 20, 20, [16, 16, 8], [16, 16, 8], [16, 16, 8], [16, 16, 8], 8, 8, 8, 4],
                44: [44, [24, 20], [24, 20], [24, 20], [16, 16, 12], [16, 16, 12], [16, 16, 12], [16, 16, 12], [8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 4], 4],
                48: [48, 24, 24, 24, 16, 16, 16, 16, 8, 8, 8, 4],
                52: [52, [28, 24], [28, 24], [28, 24], [20, 20, 12], [20, 20, 12], [20, 20, 12], [20, 20, 12], [8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 4], 4],
                56: [56, 28, 28, 28, [16, 16, 16, 8], [16, 16, 16, 8], [16, 16, 16, 8], [16, 16, 16, 8], 8, 8, 8, 4],
                60: [60, 20, 20, 20, 12, 12, 12, 12, [8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 4], 4],
                64: [64, 32, 32, 32, 16, 16, 16, 16, 8, 8, 8, 4],
                68: [68, [36, 32], [36, 32], [36, 32], [20, 16, 16, 16], [20, 16, 16, 16], [20, 16, 16, 16], [12, 12, 12, 12, 12, 8], [12, 12, 12, 12, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                72: [72, 36, 36, 36, 24, 24, 24, 12, 12, [8, 8, 8, 8, 8, 8, 8, 8, 4, 4], [8, 8, 8, 8, 8, 8, 8, 8, 4, 4], 4],
                76: [76, [40, 36], [40, 36], [40, 36], [20, 20, 20, 16], [20, 20, 20, 16], [20, 20, 20, 16], [16, 16, 16, 16, 12], [16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                80: [80, 40, 40, 40, 20, 20, 20, 16, 16, 8, 8, 4],
                84: [84, [44, 40], [44, 40], [44, 40], [24, 20, 20, 20], [24, 20, 20, 20], [24, 20, 20, 20], [16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                88: [88, 44, 44, 44, [24, 24, 20, 20], [24, 24, 20, 20], [24, 24, 20, 20], [16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 8], 8, 8, 4],
                92: [92, [48, 44], [48, 44], [48, 44], [24, 24, 24, 20], [24, 24, 24, 20], [24, 24, 24, 20], [16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                96: [96, 48, 48, 48, 24, 24, 24, 16, 16, 8, 8, 4],
                100: [100, [52, 48], [52, 48], [52, 48], [28, 24, 24, 24], [28, 24, 24, 24], [28, 24, 24, 24], [16, 16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 16, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                104: [104, 52, 52, 52, [28, 28, 24, 24], [28, 28, 24, 24], [28, 28, 24, 24], [16, 16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 16, 8], 8, 8, 4],
                108: [108, [56, 52], [56, 52], [56, 52], [28, 28, 28, 24], [28, 28, 28, 24], [28, 28, 28, 24], [16, 16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                112: [112, 56, 56, 56, 28, 28, 28, 16, 16, 8, 8, 4],
                116: [116, [60, 56], [60, 56], [60, 56], [32, 28, 28, 28], [32, 28, 28, 28], [32, 28, 28, 28], [16, 16, 16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 16, 16, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                120: [120, 60, 60, 60, [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [16, 16, 16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 16, 16, 8], 8, 8, 4],
                124: [124, [64, 60], [64, 60], [64, 60], [32, 32, 32, 28], [32, 32, 32, 28], [32, 32, 32, 28], [16, 16, 16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                128: [128, 64, 64, 64, 32, 32, 32, 16, 16, 8, 8, 4]
            },
            13: {
                16: [16, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8, 8, 4],
                20: [20, [12, 8], [12, 8], [12, 8], [12, 8], [12, 8], [12, 8], [8, 8, 4], [8, 8, 4], [8, 8, 4], [8, 8, 4], [8, 8, 4], 4],
                24: [24, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 4],
                28: [28, [16, 12], [16, 12], [16, 12], [16, 12], [16, 12], [16, 12], [8, 8, 8, 4], [8, 8, 8, 4], [8, 8, 8, 4], [8, 8, 8, 4], [8, 8, 8, 4], 4],
                32: [32, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8, 4],
                36: [36, [20, 16], [20, 16], [20, 16], 12, 12, 12, 12, [8, 8, 8, 8, 4], [8, 8, 8, 8, 4], [8, 8, 8, 8, 4], [8, 8, 8, 8, 4], 4],
                40: [40, 20, 20, 20, [16, 16, 8], [16, 16, 8], [16, 16, 8], [16, 16, 8], 8, 8, 8, 8, 4],
                44: [44, [24, 20], [24, 20], [24, 20], [16, 16, 12], [16, 16, 12], [16, 16, 12], [16, 16, 12], [8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 4], 4],
                48: [48, 24, 24, 24, 16, 16, 16, 16, 8, 8, 8, 8, 4],
                52: [52, [28, 24], [28, 24], [28, 24], [20, 20, 12], [20, 20, 12], [20, 20, 12], [20, 20, 12], [8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 4], 4],
                56: [56, 28, 28, 28, [16, 16, 16, 8], [16, 16, 16, 8], [16, 16, 16, 8], [16, 16, 16, 8], 8, 8, 8, 8, 4],
                60: [60, 20, 20, 20, 12, 12, 12, 12, [8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 4], 4],
                64: [64, 32, 32, 32, 16, 16, 16, 16, 8, 8, 8, 8, 4],
                68: [68, [36, 32], [36, 32], [36, 32], [20, 16, 16, 16], [20, 16, 16, 16], [20, 16, 16, 16], [12, 12, 12, 12, 12, 8], [12, 12, 12, 12, 12, 8], [12, 12, 12, 12, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                72: [72, 36, 36, 36, 24, 24, 24, 12, 12, 12, [8, 8, 8, 8, 8, 8, 8, 8, 4, 4], [8, 8, 8, 8, 8, 8, 8, 8, 4, 4], 4],
                76: [76, [40, 36], [40, 36], [40, 36], [20, 20, 20, 16], [20, 20, 20, 16], [20, 20, 20, 16], [16, 16, 16, 16, 12], [16, 16, 16, 16, 12], [16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                80: [80, 40, 40, 40, 20, 20, 20, 16, 16, 16, 8, 8, 4],
                84: [84, [44, 40], [44, 40], [44, 40], [24, 20, 20, 20], [24, 20, 20, 20], [24, 20, 20, 20], [16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                88: [88, 44, 44, 44, [24, 24, 20, 20], [24, 24, 20, 20], [24, 24, 20, 20], [16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 8], 8, 8, 4],
                92: [92, [48, 44], [48, 44], [48, 44], [24, 24, 24, 20], [24, 24, 24, 20], [24, 24, 24, 20], [16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                96: [96, 48, 48, 48, 24, 24, 24, 16, 16, 16, 8, 8, 4],
                100: [100, [52, 48], [52, 48], [52, 48], [28, 24, 24, 24], [28, 24, 24, 24], [28, 24, 24, 24], [16, 16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 16, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                104: [104, 52, 52, 52, [28, 28, 24, 24], [28, 28, 24, 24], [28, 28, 24, 24], [16, 16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 16, 8], 8, 8, 4],
                108: [108, [56, 52], [56, 52], [56, 52], [28, 28, 28, 24], [28, 28, 28, 24], [28, 28, 28, 24], [16, 16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                112: [112, 56, 56, 56, 28, 28, 28, 16, 16, 16, 8, 8, 4],
                116: [116, [60, 56], [60, 56], [60, 56], [32, 28, 28, 28], [32, 28, 28, 28], [32, 28, 28, 28], [16, 16, 16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 16, 16, 12, 8], [16, 16, 16, 16, 16, 16, 12, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                120: [120, 60, 60, 60, [32, 32, 28, 28], [32, 32, 28, 28], [32, 32, 28, 28], [16, 16, 16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 16, 16, 8], [16, 16, 16, 16, 16, 16, 16, 8], 8, 8, 4],
                124: [124, [64, 60], [64, 60], [64, 60], [32, 32, 32, 28], [32, 32, 32, 28], [32, 32, 32, 28], [16, 16, 16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 16, 16, 12], [16, 16, 16, 16, 16, 16, 16, 12], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], 4],
                128: [128, 64, 64, 64, 32, 32, 32, 16, 16, 16, 8, 8, 4]
            }// ,
            // Pinball at the lake, 7 round tiers
            // 7: {
            //   16: [16, 16, 16, 16, 8, 8, 8],
            //   20: [20, 20, 20, [12, 8], [12, 8], [8, 8, 4], [8, 8, 4]],
            //   24: [24, 24, 24, 12, 12, 8, 8],
            //   28: [28, 28, 28, [16, 12], [16, 12], [8, 8, 8, 4], [8, 8, 8, 4]],
            //   32: [32, 32, 32, 16, 16, 8, 8],
            //   36: [36, [20, 16], [20, 16], 12, 12, [8, 8, 8, 8, 4], [8, 8, 8, 8, 4]],
            //   40: [40, 20, 20, [16, 16, 8], [16, 16, 8], 8, 8],
            //   44: [44, [24, 20], [24, 20], [16, 16, 12], [16, 16, 12], [8, 8, 8, 8, 8, 4]],
            //   48: [48, 24, 24, 16, 16, 8, 8],
            // }
        };

        // prep group maps for 3 and 4 rounds
        for (var index in groupMaps[5]) {
            if (!groupMaps[5].hasOwnProperty(index)) continue;
            var tiers = groupMaps[5][index];

            // For three rounds, remove index 1, 2
            var threeRoundTiers = tiers.slice(0);
            threeRoundTiers.splice(1, 2);
            if (groupMaps[3] == undefined) {
                groupMaps[3] = {};
            }
            groupMaps[3][index] = threeRoundTiers;

            // For four rounds, remove index 2 (the middle round)
            var fourRoundTiers = tiers.slice(0);
            fourRoundTiers.splice(2, 1);
            if (groupMaps[4] == undefined) {
                groupMaps[4] = {};
            }
            groupMaps[4][index] = fourRoundTiers;
        }

        return groupMaps;
    }

    function getGroupMap(groupMaps, rounds, playerLength) {
        var mod = playerLength % 4;
        var key, map;

        // keys are based on 4 player length
        // so if the number of players isn't divisible by 4
        // then we add the difference to get there
        if (mod > 0) {
            key = playerLength + (4 - mod);
        } else {
            key = playerLength;
        }

        map = groupMaps[rounds][key];

        return {
            map: map,
            key: key
        };
    }

    function getRoundMap(groupMaps, rounds, round, playerLength) {
        var map = getGroupMap(groupMaps, rounds, playerLength);
        var roundMap = map.map[round];

        if (Number.isInteger(roundMap)) {
            roundMap = new Array(map.key / roundMap).fill(roundMap);
        }

        return roundMap;
    }

    sort.title = title;
    sort.description = description;

    // export for node, amd, or window
    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
        module.exports = sort;
    } else {
        if (typeof define === 'function' && define.amd) {
            define([], function () {
                return sort;
            });
        } else {
            window.GroupTieredSwissPairing = sort;
        }
    }

})();