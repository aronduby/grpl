var Q = require('q');

/*
 *	Controller Functions
*/
exports.getByNameKey = function(name_key){
	var d = Q.defer();

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); db.end(); return false; }
		db.query("SELECT * FROM player WHERE name_key=?", [name_key], function(err, results){
			if(err){ d.reject(err); db.end(); return false; }
			d.resolve(new Player(results[0]));
			db.end();
		});
	});

	return d.promise;
};

exports.getAllForSeason = function(season_id){
	var d = Q.defer(),
		players = [];

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); db.end(); return false; }

		var sql = "SELECT p.* FROM player p LEFT JOIN player_to_season pts USING(name_key) WHERE pts.season_id=? ORDER BY name_key";
		db.query(sql, [season_id], function(err, results){
			if(err){ d.reject(err); db.end(); return false; }
			results.forEach(function(row){
				players.push(new Player(row));
			});
			d.resolve(players);
			db.end();
		});
	});

	return d.promise;
};

exports.getByFBToken = function(token){
	var https = require('https'),
		d = Q.defer();

	https.get('https://graph.facebook.com/me?fields=id&access_token='+token, function(res) {
		res.on('data', function(data) {
			var fb_id = JSON.parse(data).id;
			exports.getByFBID(fb_id)
			.then(function(player){
				d.resolve(player);
			})
			.fail(function(err){
				d.reject(err);
			});
		});
	}).on('error', function(e) {
		d.reject(e);
	});

	return d.promise;
}


exports.getByFBID = function(fb_id){
	var d = Q.defer();

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); db.end(); return false; }
		db.query("SELECT * FROM player WHERE facebook_id=?", [fb_id], function(err, results){
			if(err){ d.reject(err); db.end(); return false; }
			if(results.length == 0){ 
				d.reject(new Error('could not find user with that ID')); 
				db.end(); 
				return false;
			}
			d.resolve(new Player(results[0]));
			db.end();
		});
	});

	return d.promise;
}





function getPool(){ return module.parent.exports.pool; }

/*
 *	Actual Object
*/
exports.Player = Player;
function Player(opts){
	for(prop in opts){
		if (prop in this) {
			this[prop] = opts[prop];
		}
	}

	this.admin = !!this.admin;
}
Player.prototype.player_id = null;
Player.prototype.first_name = null;
Player.prototype.last_name = null;
Player.prototype.email = null;
Player.prototype.facebook_id = null;
Player.prototype.admin = null;
Player.prototype.name_key = null;
Player.prototype.save = function(){
	var self = this;
	getPool().getConnection(function(err, connection){
		var query = connection.query("INSERT INTO player SET ? ON DUPLICATE KEY UPDATE ?", [self, self], function(err, result) {
			console.log(result);
		});
	});
}