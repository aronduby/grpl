var Q = require('q'),
	moment = require('moment');

/*
 *	Controller Functions
*/
exports.getByStarts = function(starts){
	var d = Q.defer();

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }
		var sql = "SELECT " +
				"ln.*, DATE_FORMAT(ln.starts, '%Y-%m-%d') AS starts, COUNT(lns.score_id) > 0 AS scored " +
			"FROM " +
				"league_night ln " +
				"LEFT JOIN league_night_score lns USING(night_id) " +
			"WHERE " +
				"ln.starts = ?";

		db.query(sql, [starts], function(err, results){
			if(err){ d.reject(err); db.release(); return false; }

			if(results.length == 0)
				d.reject('No league night found on that date');

			var night = new LeagueNight(results[0]);
			
			// get the subs			
			var sub_sql = "SELECT lnsub.*, CONCAT(p.first_name,' ',p.last_name) AS player " +
				"FROM league_night_sub lnsub " +
				"LEFT JOIN player p USING(name_key) " +
				"WHERE night_id=?";

			db.query(sub_sql, [night.night_id], function(err, rows){
				if(err){ d.reject(err); db.release(); return false; }

				var obj = {};
				rows.forEach(function(r){
					obj[r.name_key] = r;
				});
				night.subs = obj;

				d.resolve(night);
				db.release();
			});
		});
	});

	return d.promise;
}


exports.getAllForSeason = function(season_id){
	var d = Q.defer(),
		nights = [];

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }

		var sql = "SELECT " +
				"ln.*, DATE_FORMAT(ln.starts, '%Y-%m-%d') AS starts, COUNT(lns.score_id) > 0 AS scored " +
			"FROM " +
				"league_night ln " +
				"LEFT JOIN league_night_score lns USING(night_id) " +
			"WHERE " +
				"ln.season_id=? " +
			"GROUP BY " + 
				"lns.night_id " + 
			"ORDER BY " +
				"ln.starts DESC";

		db.query(sql, [season_id], function(err, results){
			if(err){ d.reject(err); db.release(); return false; }

			results.forEach(function(row){
				nights.push(new LeagueNight(row));
			});
			db.release();
			d.resolve(nights);
		});
	});

	return d.promise;
}



function getPool(){ return module.parent.exports.pool; }
function nl2br(str, is_xhtml){
	var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br ' + '/>' : '<br>'; // Adjust comment to avoid issue on phpjs.org display
	return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + breakTag + '$2');
}

/*
 *	Actual Object
*/
exports.LeagueNight = LeagueNight;
function LeagueNight(opts){
	for(prop in opts){
		if (prop in this) {
			this[prop] = opts[prop];
		}
	}

	if(this.note != null)
		this.note = nl2br(this.note);

	if(this.starts == 'totals'){
		this.description = 'running totals for the season';
	}

	this.scored = !!this.scored;

}
LeagueNight.prototype.night_id = null;
LeagueNight.prototype.season_id = null;
LeagueNight.prototype.title = null;
LeagueNight.prototype.starts = null;
LeagueNight.prototype.description = null;
LeagueNight.prototype.note = null;
LeagueNight.prototype.has_order = 0;
LeagueNight.prototype.divisions = null;
LeagueNight.prototype.subs = null;
LeagueNight.prototype.scored = null;

LeagueNight.prototype.save = function(){
	var self = this,
		d = Q.defer();

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }

		var ln_data = {
			'night_id': self.night_id,
			'season_id': self.season_id,
			'title': self.title,
			'description': moment(self.starts).format('MMMM Do, YYYY'),
			'starts': self.starts,
			'note': self.note,
			'has_order': self.has_order
		};

		var query = db.query("INSERT INTO league_night SET ? ON DUPLICATE KEY UPDATE ?", [ln_data, ln_data], function(err, result) {
			if(err){ d.reject(err); db.release(); return false; }
			
			if(!self.night_id && result.insertId)
				self.night_id = result.insertId;


			// check/create the start order for this night
			db.query("SELECT COUNT(*) AS order_exists FROM league_night_order WHERE night_id = ?", [self.night_id], function(err, result){
				if(err){ d.reject(err); db.release(); return false; }

				if(result[0].order_exists > 0){
					if(!self.has_order){
						self.has_order = true;
						self.save();
					}
					// the order already exists resolve
					d.resolve(self);
					db.release();
				} else {

					module.parent.exports.playerlist.createStartOrderForNight(self.season_id, self.starts)
					.then(function(order){
						var rank = 0,
							start_order = 0,
							grouping = 0,
							prev_scoring_string = '',
							sets = [];

						order.forEach(function(r){
							if(r.scoring_string != prev_scoring_string){
								rank = start_order + 1;
							}

							sets.push([
								self.night_id,
								r.name_key,
								rank,
								start_order,
								grouping
							]);
							
							if(start_order %4 == 3)
								grouping++;
							
							prev_scoring_string = r.scoring_string;
							start_order++;
						});

						var query = db.query("INSERT INTO league_night_order (`night_id`, `name_key`, `rank`, `start_order`, `grouping`) VALUES ?", [sets], function(err, results){
							if(err){ d.reject(err); db.release(); return false; }

							self.has_order = 1;
							self.save()
							.then(function(){
								self.has_order = true;
								self.save();

								d.resolve(self);
								db.release();
							})
							.fail(function(err){
								console.log(err);
								d.reject(err);
								db.release();
							}).done();
							
						});
						// console.log(query.sql);


					}).fail(function(err){
						console.log(err);
						d.reject(err);
						return false;
					}).done();
				}
			});
			
		});
		// console.log(query.sql);
	});

	return d.promise;
}


LeagueNight.prototype.saveOrder = function(data){
	var self = this,
		d = Q.defer();

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }

		db.query("DELETE FROM league_night_order WHERE night_id = ?", [data.night_id], function(err, result){
			if(err){ d.reject(err); db.release(); return false; }

			var sets = [],
				season_id = data.season_id,
				night_id = data.night_id;

			data.order.forEach(function(p){
				sets.push([
					night_id,
					p.name_key,
					p.rank,
					p.start_order,
					p.grouping,
					p.dnp
				]);
			});

			
			var sql = "INSERT INTO league_night_order (night_id, name_key, rank, start_order, grouping, dnp) VALUES ?";
			db.query(sql, [sets], function(err, results){
				if(err){ d.reject(err); db.release(); return false; }
				d.resolve(results);
				db.release();
			});
		});
	});

	return d.promise;
}