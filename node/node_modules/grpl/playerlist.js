var Q = require('q');

/*
 *	Controller Functions
*/
exports.getForSeason = function(season_id){
	var d = Q.defer(),
		list = new PlayerList();

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }

		var sql = "SELECT p.* FROM player p LEFT JOIN player_to_season pts USING(name_key) WHERE pts.season_id=? ORDER BY name_key";
		db.query(sql, [season_id], function(err, results){
			if(err){ d.reject(err); return false; }
			results.forEach(function(row){
				list.add(new module.parent.exports.player.Player(row));
			});
			d.resolve(list);
			db.end();
		});
	});

	return d.promise;
};


exports.getRankings = function(starts){
	var d = Q.defer(),
		list = new PlayerList();

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }

		var sql = "SELECT f.*, breaker, CONCAT(score,'.',firsts,'.',seconds,'.',thirds,'.',fourths,'.',subbed,'.',IFNULL(breaker,0)) AS scoring_string " +
			"FROM ( " +
				"SELECT  " +
					"p.*,  " +
					"SUM(n.points) AS score,  " +
					"SUM(n.firsts) AS firsts,  " +
					"SUM(n.seconds) AS seconds,  " +
					"SUM(n.thirds) AS thirds,  " +
					"SUM(n.fourths) AS fourths,  " +
					"SUM(n.subbed) AS subbed " +
				"FROM  " +
					"player_points_per_night n  " +
					"LEFT JOIN player p USING(name_key) " +
				(starts != null ? 'WHERE starts < \''+starts+'\' ' : '') + 
				"GROUP BY  " +
					"name_key  " +
			") AS f " +
			"LEFT JOIN (  " +
				"SELECT  " +
					"name_key, place AS breaker " +
				"FROM  " +
					"tie_breaker  " +
				"WHERE  " +
					"starts = "+(starts != null ? "'"+starts+"' " : "(SELECT MAX(starts) FROM league_night) ") +
			") AS tb USING(name_key) " +
			"ORDER BY  " +
				"score DESC, " +
				"firsts DESC, " +
				"seconds DESC, " +
				"thirds DESC, " +
				"fourths DESC, " +
				"subbed ASC, " +
				"breaker ASC";

		db.query(sql, function(err, results){
			if(err){ d.reject(err); return false; }

			if(results.length > 0){
				var i = 1;
				results.forEach(function(row){
					row.place = i;
					list.add(new module.parent.exports.player.Player(row));
					i++;
				});
				d.resolve(list);
				db.end();
			} else {
				var sql = '';
				if(starts != undefined){
					sql = "SELECT " +
							"p.*, 0 AS score " +
						"FROM " +
							"league_night ln, " +
							"player_to_season pts, " +
							"player p " +
						"WHERE  " +
							"ln.starts='"+starts+"' " +
							"AND ln.season_id = pts.season_id " +
							"AND pts.name_key = p.name_key";	
				} else {
					sql = "SELECT " +
							"p.*, 0 AS score " +
						"FROM " +
							"league_night ln, " +
							"player_to_season pts, " +
							"player p " +
						"WHERE " +
							"ln.starts=(SELECT MAX(starts) FROM league_night) " +
							"AND ln.season_id = pts.season_id " +
							"AND pts.name_key = p.name_key"; 
				}
				var query = db.query(sql, function(err, results){
					if(err){ d.reject(err); return false; }
					var i = 1;
					results.forEach(function(row){
						row.place = i;
						list.add(new module.parent.exports.player.Player(row));
						i++;
					});
					d.resolve(list);
					db.end();
				});
			}
		});
	});

	return d.promise;
}

exports.getTies = function(){
	var d = Q.defer();

	exports.getRankings()
	.then(function(player_list){

		var all_ties = [],
			cur_tie = [],
			cur_string = false;

		player_list.players.forEach(function(player){
			if(player.scoring_string != null && (player.scoring_string == cur_string || cur_string !== false)){
				cur_tie.push(player);
			} else {
				if(cur_tie.length > 1){
					all_ties.push(cur_tie);
				}
				cur_tie = [player];

			}
			cur_string = player.scoring_string;
		});

		if(cur_tie.length > 1)
			all_ties.push(cur_tie);

		d.resolve(all_ties);

	}).fail(function(err){
		d.reject(err);
	}).done();

	return d.promise;
}

exports.getPointsForNight = function(starts){
	var d = Q.defer();

	Q.all([exports.getRankings(starts), module.parent.exports.machine.getForLeagueNight(starts)])
	.spread(function(player_list, machines){
			var all_machines = {};
			machines.forEach(function(m){
				all_machines[m.abbv] = '';
			});
			
			// get all of the points for the night that are already in the database
			getPool().getConnection(function(err, db){
				if(err){ d.reject(err); return false; }
				
				var sql = "SELECT " +
						"lns.name_key, SUM(lns.points) AS points, GROUP_CONCAT(mtln.abbv,':',IFNULL(lns.points,'')) AS machines " +
					"FROM " +
						"machine_to_league_night mtln " +
						"LEFT JOIN league_night_score lns USING(starts, abbv) " +
					"WHERE mtln.starts=? " +
					"GROUP BY name_key " +
					"ORDER BY name_key";

				db.query(sql, [starts], function(err, results){
					if(err){ d.reject(err); return false; }

					var player_night = {};
					results.forEach(function(r){
						var obj = {
							points: r.points,
							machines: {}
						};
						r.machines.split(',').forEach(function(part){
							var s = part.split(':');
							obj.machines[s[0]] = s[1];
						});
						player_night[r.name_key] = obj;						
					});

					// loop through all of our players and add their player_night info
					player_list.players.forEach(function(player){
						if(player_night[player.name_key] == undefined){
							player.machines = all_machines;
						} else {
							// extend all_machines since this could happen in the middle of a night
							var player_machines = {};
							for(var abbv in all_machines){
								player_machines[abbv] = player_night[player.name_key].machines[abbv] != undefined ? player_night[player.name_key].machines[abbv] : '';
							}
							player.machines = player_machines;
							player.night_score = player_night[player.name_key].points;
							// player.score = player_night[player.name_key].points+' '+player.score;
						}
					});

					d.resolve(player_list);
					db.end();
				});
			});

		}
	).fail(function(err){
		console.log(err);
	})

	return d.promise;
}



function getPool(){ return module.parent.exports.pool; }

/*
 *	Actual Object
*/
exports.PlayerList = PlayerList;
function PlayerList(opts){
	for(prop in opts){
		if (prop in this) {
			this[prop] = opts[prop];
		}
	}
	this.clear();
}

PlayerList.prototype.players = [];
PlayerList.prototype.order = null;
PlayerList.prototype.clear = function(){
	this.players = [];
}
PlayerList.prototype.add = function(player){
	this.players.push(player);
}
PlayerList.prototype.getPlaceForPlayer = function(name_key){
	for(var i in this.players){
		if(this.players[i].name_key == name_key)
			return (Number(i) + 1);
	}
	return false;
}
PlayerList.prototype.getPlayer = function(name_key){
	for(var i in this.players){
		if(this.players[i].name_key == name_key){
			return this.players[i];
		}
	}
	return false;	
}
PlayerList.prototype.getGroupForPlayer = function(name_key){
	var group = new PlayerList(),
		place = this.getPlaceForPlayer(name_key) - 1,
		start = place - (place % 4),
		end = start + 4, // not inclusive
		sliced = this.players.slice(start, end);

	group.order = start/4;

	sliced.forEach(function(player){
		group.add(player);
	});

	return group;
}