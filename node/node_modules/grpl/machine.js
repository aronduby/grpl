var Q = require('q');

/*
 *	Controller Functions
*/
exports.getByAbbv = function(abbv){
	var d = Q.defer();

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }
		db.query("SELECT * FROM machine WHERE abbv=?", [abbv], function(err, results){
			if(err){ d.reject(err); return false; }
			d.resolve(new Machine(results[0]));
			db.end();
		});
	});

	return d.promise;
}


exports.getForLeagueNight = function(starts){
	var d = Q.defer(),
		machines = [];

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }

		var sql = "SELECT m.* FROM machine_to_league_night mtln LEFT JOIN machine m USING(abbv) WHERE mtln.starts=? ORDER BY display_order";
		db.query(sql, [starts], function(err, results){
			if(err){ d.reject(err); return false; }
			results.forEach(function(row){
				machines.push(new Machine(row));
			});
			db.end();
			d.resolve(machines);
		});
	});

	return d.promise;
}


exports.getForSeason = function(season_id){
	var d = Q.defer(),
		machines = [];

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }

		var sql = "SELECT * FROM machine WHERE season_id=? ORDER BY abbv";
		db.query(sql, [season_id], function(err, results){
			if(err){ d.reject(err); return false; }
			results.forEach(function(row){
				machines.push(new Machine(row));
			});
			db.end();
			d.resolve(machines);
		});
	});

	return d.promise;
}


exports.getPlayedLessThanXTimes = function(season_id, times, limit){
	var d = Q.defer(),
		machines = [];

	if(times == undefined)
		times = 2;
	if(limit == undefined)
		limit = 5;

	getPool().getConnection(function(err, db){
		if(err){ d.reject(err); return false; }

		var sql = "SELECT m.*, COUNT(mtln.abbv) AS played " +
			"FROM machine m " +
			"LEFT JOIN machine_to_league_night mtln USING (abbv) " +
			"LEFT JOIN league_night ln ON(mtln.starts=ln.starts) " +
			"WHERE " +
			"m.season_id=? " +
			"AND ( " +
			    "ln.season_id = ? " +
			    "OR ln.season_id IS NULL " +
			") " +
			"GROUP BY mtln.abbv " +
			"HAVING played < ? " +
			// "ORDER BY RAND() " +
			"LIMIT ? ";

		db.query(sql, [season_id, season_id, times, limit], function(err, results){
			if(err){ d.reject(err); return false; }
			results.forEach(function(row){
				machines.push(new Machine(row));
			});
			db.end();
			d.resolve(machines);
		});
	});

	return d.promise;
}





function getPool(){ return module.parent.exports.pool; }
function nl2br(str, is_xhtml){
	var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br ' + '/>' : '<br>'; // Adjust comment to avoid issue on phpjs.org display
	return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + breakTag + '$2');
}

/*
 *	Actual Object
*/
exports.Machine = Machine;
function Machine(opts){
	for(prop in opts){
		if (prop in this) {
			this[prop] = opts[prop];
		}
	}
	if(this.note != null && this.note.length)
		this.note = nl2br(this.note);
}
Machine.prototype.machine_id = null;
Machine.prototype.season_id = null;
Machine.prototype.name = null;
Machine.prototype.abbv = null;
Machine.prototype.image = null;
Machine.prototype.url = null;
Machine.prototype.note = null;

Machine.prototype.save = function(){
	var self = this;
	getPool().getConnection(function(err, connection){
		var query = connection.query("INSERT INTO league_night SET ? ON DUPLICATE KEY UPDATE ?", [self, self], function(err, result) {
			console.log(result);
		});
	});
}